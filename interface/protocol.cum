Type u8
{
    type(unsigned) width(8)
};

Type i8
{
    type(signed) width(8)
};


Type u8Optional
{
    type(u8) optional()
};

Type u8array
{
    type(u8) dynamic_array(256)
};

Type u16
{
    type(unsigned) width(16)
};

Type u16Array
{
    type(u16) dynamic_array(256)
}

Type u64
{
    type(unsigned) width(64)
};

Type String
{
    type(asciiz)
};

Enumeration Action
{
    LEFT,
    RIGHT,
    SOFT_DROP,
    HARD_DROP,
    HOLD,
    ROT_CLOCK,
    ROT_CCLOCK,
    ROT_180
};

Enumeration Piece
{
    I,
    L,
    J,
    O,
    S,
    Z,
    T
};

Sequence CreateGameRequest
{
    u8 boardWidth,
    u8 boardHeight,
    u16 targetChangeTimeoutMs,
    u16 lockingTimeoutMs
};

Sequence CreateGameReject
{
    u8 spare
};

Sequence CreateGameAccept
{
    u64 gameId
};

Sequence GameStartIndication
{
    u8 spare
};

Type PieceList
{
    type(Piece) dynamic_array(256)
};

Sequence PieceRequest
{
    u8 count
};

Sequence PieceResponse
{
    PieceList pieceToAddList
};

Sequence AttackLinesRequest
{
    u8 count   
};

Sequence AttackLinesRequest
{
    u16Array attackLinesToAddList 
};

Sequence Player
{
    String name,
    u8 id
};

Type PlayerList
{
    type(Player) dynamic_array(256)
};

Sequence GameStartNotification
{
    u8 spare
};

Sequence PlayerUpdateNotification
{
    PlayerList playerToAddList
};

Sequence Line
{
    u8 line,
    u16 diff
};

Type LineList
{
    type(Line) dynamic_array(256)
};

Sequence PiecePosition
{
    i8 x,
    i8 y
};

Type PiecePositionOptional
{
    type(PiecePosition) optional()
};

Type PieceOptional
{
    type(Piece) optional()
};

Sequence BoardUpdateNotification
{
    u8 player,
    PieceList pieceToAddList,
    LineList linesToReplaceList,
    u8array linesToRemoveList,
    LineList linesToInsertList,

    u8Optional rotation,
    PieceOptional placement,
    PieceOptional hold,
    u8Optional attackIndicator,
    PiecePositionOptional position
};

Sequence GameOverNotification
{
    u8 playerId
};

Sequence JoinRequest
{
    u64 gameId
};

Sequence JoinAccept
{
    u8 playerId,
    u8 boardWidth,
    u8 boardHeight
};

Sequence JoinReject
{
    u8 spare
};

Sequence PlayerActionIndication
{
    u8 player,
    u8 count,
    Action action
};

Choice TetrisProtocol
{
    CreateGameRequest,
    CreateGameAccept,
    CreateGameReject,
    GameStartIndication,
    PieceRequest,
    PieceResponse,
    AttackLinesRequest,
    AttackLinesResponse,

    GameStartNotification,
    PlayerUpdateNotification,
    BoardUpdateNotification,
    GameOverNotification,

    JoinRequest,
    JoinAccept,
    JoinReject,
    PlayerActionIndication
};

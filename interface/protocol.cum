Type u8
{
    type(unsigned) width(8)
};

Type i8
{
    type(signed) width(8)
};

Type u8Optional
{
    type(u8) optional()
};

Type u8array
{
    type(u8) dynamic_array(256)
};

Type u8arrayLarge
{
    type(u8) dynamic_array()
};

Type u16
{
    type(unsigned) width(16)
};

Type u16Array
{
    type(u16) dynamic_array(256)
};

Type u64
{
    type(unsigned) width(64)
};

Type String
{
    type(asciiz)
};

Enumeration Action
{
    LEFT,
    RIGHT,
    SOFT_DROP,
    HARD_DROP,
    HOLD,
    ROT_CLOCK,
    ROT_CCLOCK,
    ROT_180
};

Enumeration Piece
{
    I,
    L,
    J,
    O,
    S,
    Z,
    T
};

Enumeration CodeType
{
    TINY_ASM,
    TINY_BIN
};

Enumeration DeleteReason
{
    DISCONNECTED,
    KICKED
};

Enumeration PlayerMode
{
    SPECTATOR,
    PLAYER
};

Enumeration AttackModeEnum
{
    SEQUENTIAL,
    DIVIDE,
    TO_ALL,
    TO_MOST,
    TO_SELF,
    ROULETTE
};

Enumeration CounteringType
{
    FULL,
    LIMITED,
    INSTANT
};

Enumeration BoardType
{
    SRS,
    ARS,
    CULTRIS
};

Sequence PlayerInfo
{
    u8 id,
    String name,
    PlayerMode mode
};

Type PlayerInfoList
{
    type(PlayerInfo) dynamic_array(256)
};

Sequence Random
{
    u64 seed
};

Sequence GameScript
{
    CodeType type,
    u8arrayLarge code
};

Choice AttackMode
{
    AttackModeEnum,
    Random,
    GameScript
};

Sequence AttackModeCommon
{
    u16 targetChangeTimeoutMs,
    u16 attackDelayMs,
    CounteringType counteringType
};

Sequence CreateGameRequest
{
    u8 boardWidth,
    u8 boardHeight,
    u16 lockingTimeoutMs,
    u16 clearTimeoutMs,
    BoardType boardType,

    AttackMode attackMode,
    AttackModeCommon attackModeCommon
};

Sequence CreateGameReject
{
    u8 spare
};

Sequence CreateGameAccept
{
    u64 gameId
};

Sequence GameStartIndication
{
    u8 spare
};

Type PieceList
{
    type(Piece) dynamic_array(256)
};

Sequence PieceRequest
{
    u8 count
};

Sequence PieceResponse
{
    PieceList pieceToAddList
};

Sequence AttackLinesRequest
{
    u8 count   
};

Sequence AttackLinesResponse
{
    u16Array attackLinesToAddList 
};

Sequence AttackIndication
{
    u8 player,
    u8Optional attack,
    u8Optional warningLines
};

Sequence GameStartNotification
{
    u8 spare
};

Sequence PlayerToRemove
{
    u8 id,
    DeleteReason reason
};

Type PlayerToRemoveList
{
    type(PlayerToRemove) dynamic_array(256)
};

Sequence PlayerUpdateNotification
{
    PlayerInfoList playeToAddList,
    PlayerInfoList playerToModifyList,
    PlayerToRemoveList playerToDelete
};

Sequence Line
{
    u8 line,
    u16 diff
};

Type LineList
{
    type(Line) dynamic_array(256)
};

Sequence PiecePosition
{
    i8 x,
    i8 y
};

Type PiecePositionOptional
{
    type(PiecePosition) optional()
};

Type PieceOptional
{
    type(Piece) optional()
};

Sequence BoardUpdateNotification
{
    u8 player,
    PieceList pieceToAddList,
    LineList linesToReplaceList,
    u8array linesToRemoveList,
    LineList linesToInsertList,

    u8Optional rotation,
    PieceOptional placement,
    PieceOptional hold,
    u8Optional attackIndicator,
    PiecePositionOptional position
};

Sequence GameOverNotification
{
    u8 player
};

Sequence GameEndNotification
{
    u8 spare
};

Sequence JoinRequest
{
    u64 gameId,
    u64 secret
};

Sequence JoinAccept
{
    u8 player,
    u64 secret,
    u8 boardWidth,
    u8 boardHeight,
    PlayerInfoList playerToAddList
};

Sequence JoinReject
{
    u8 spare
};

Sequence PlayerActionIndication
{
    u8 player,
    u8 count,
    Action action
};

Choice TetrisProtocol
{
    CreateGameRequest,
    CreateGameAccept,
    CreateGameReject,
    GameStartIndication,
    PieceRequest,
    PieceResponse,
    AttackLinesRequest,
    AttackLinesResponse,
    AttackIndication,

    GameStartNotification,
    PlayerUpdateNotification,
    BoardUpdateNotification,
    GameOverNotification,
    GameEndNotification,

    JoinRequest,
    JoinAccept,
    JoinReject,
    PlayerActionIndication
};

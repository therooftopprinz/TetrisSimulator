Type u8
{
    type(unsigned) width(8)
};

Type U8array
{
    type(u8) dynamic_array()
}

Type u64
{
    type(unsigned) width(64)
};

Type String
{
    type(asciiz)
};

Enumeration Action
{
    LEFT,
    RIGHT,
    SOFT_DROP,
    HARD_DROP,
    HOLD,
    ROT_CLOCK,
    ROT_CCLOCK,`
    ROT_180
};

Enumeration Piece
{
    L,
    L_MIRRORED,
    I,
    S,
    S_MIRRORED,
    BOX
};

Sequence CreateGameRequest
{
    u8 boardWidth,
    u8 boardHeight
};

Sequence CreateGameResponse
{
    u64 gameId
};

Sequence JoinRequest
{
    u64 gameId
};

Sequence Player
{
    String name,
    u64 id
};

type PlayerList
{
    type(Player) dynamic_array(256)
};

Sequence JoinAccept
{
    u64 playerId
};

Sequence JoinReject
{
    u8 spare
};

Sequence PlayerUpdateNotification
{
    PlayerList players
};

Sequence PlayerActionIndication
{
    u8 repeat,
    Action action
};

Type Lines
{
    type(unsigned) width(8) dynamic_array(256)
};

Enumeration AddMode
{
    INSERT,
    REPLACE
}

Sequence LineToAdd
{
    AddMode mode,
    u8 line,
    u64 diff
};

Type LineToAddList
{
    type(LineToAdd) dynamic_array()
}

Type PieceList
{
    type(Piece) dynamic_array(256)
};

Type OptionalPiece
{
    type(Piece) optional()
};

Sequence PiecePosition
{
    u8 x,
    u8 y
}

Type PiecePositionOptional
{
    type(PiecePosition) optional()
}

Sequence BoardUpdateNotification
{
    u8 player,
    PieceList pieceToAddList,
    PiecePositionOptional position,
    U8array linesToRemoveList,
    LineToAddList linesToAddList,
};

Sequence PushPieceIndication
{
    PieceList pieceToAddList
}

Sequence GameStartIndication
{
    u64 dropRequiredTimeout
};

Sequence GameOverNotification
{
    u64 playerId
};

Choice TetrisProtocol
{
    CreateGameRequest,
    CreateGameResponse,
    JoinRequest,
    JoinAccept,
    JoinReject,
    PlayerUpdateNotification,
    PlayerActionIndication,
    BoardUpdateNotification,
    PushPieceIndication,
    GameStartIndication,
    GameOverNotification
};
